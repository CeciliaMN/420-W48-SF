@startuml


interface Evenement {
    + void Executer()
    # void _executer()
}

class EvenementHorloge {
    - m_pasMillis : unsigned long
    - m_dernierMillis : unsigned long

    + EvenementHorloge(p_pasMillis : unsigned long)
    + void Executer() {virtual}
}

class EvenementToujours {
    + EvenementToujours()
    + void Executer()
}

class GestionEvenementsClass {
    + GestionEvenementsClass()
    + void Ajouter(p_event : Evenement *)
    + void Executer()
    + void Start()
    
    - m_evenements[MAXIMUM_EVENEMENTS]: Evenement *
    - m_nombreEvenement : int
}

class Affichage4DigitsAvecEvenement
{
    - m_affichage4Digits : const Affichage4DigitsBase &
    - m_base : int
    - m_valeur : int
    # void _executer() <<virtual>>
    + Affichage4DigitsAvecEvenement(p_affichage4Digits : const Affichage4DigitsBase &, p_base : const inst &)
    + void Valeur(p_valeur : int)
    + void Base(p_base : int)
}

Evenement <|-- EvenementHorloge
Evenement <|-- EvenementToujours
EvenementToujours <|-- Affichage4DigitsAvecEvenement


GestionEvenementsClass "1" -left-> "*" Evenement 

class Affichage4DigitsBase
{
    - m_pinD[4] : int
    - m_digitOff : int
    - m_digitOn : int
    - m_cache: byte[4] <<mutable>>
    - m_valeurCache : int <<mutable>>
    - m_baseCache : int <<mutable>>
    - m_digitCourant : int <<mutable>>
    # m_segmentOff : int 
    # m_segmentOn : int 

    + void Afficher(p_valeur : const int &, p_base : const int &) const
    + void Executer() const
    # Affichage4DigitsBase(p_pinD1 : const int &, [...]p_pinD4, p_cathodeCommune : const bool &)
    # void EnvoyerValeur(p_valeur : const byte) const {abstract }<<virtual>>
}

class Affichage4DigitsDirect
{
  - m_pinSegments : int[8]

  + Affichage4DigitsDirect(p_pinSegmentA : const int &, [...]p_pinSegmentDP, p_pinD1 : const int &, [...]p_pinD4, p_cathodeCommune : const bool &)
  # virtual void EnvoyerValeur(p_valeur : const byte) const;

}

class Affichage4DigitsRegistre 
{
    - m_pinDS : int
    - m_pinSH : int
    - m_pinST : int

    + Affichage4DigitsRegistre(p_pinDS : const int &, p_pinSH : const int &, p_pinST : const int &, p_pinD1 : const int &, [...]p_pinD4, p_cathodeCommune : const bool &);
    # virtual void EnvoyerValeur(p_valeur : const byte) const;
}

Affichage4DigitsBase <|-- Affichage4DigitsDirect
Affichage4DigitsBase <|-- Affichage4DigitsRegistre


Affichage4DigitsAvecEvenement -left-> Affichage4DigitsBase
@enduml